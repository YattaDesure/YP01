Task 

5.1 Создайте новую страницу ControlsView и класс ControlsViewModel,
настройте взаимодействие между ними.
5.2 Применение TextBlock
5.2.1 Расположите на странице TextBlock
5.2.2 Внутри TextBlock разместите 4 элемента Run с текстом. Для каждого
из них установите различный цвет шрифта.
5.2.3 Между 2 и 3 Run расположите элемент LineBreak для переноса
строки
5.2.4 Добавьте в TextBlock элемент Span, переместите внутрь его первый
и второй Run. Для Span укажите другой размер шрифта и цвет фона.
5.2.5 Используя элементы Bold, Italic, Underline измените начертание
фрагментов текста в TextBlock.
5.2.6 Добавьте в TextBlock изображение при помощи InlineUIContainer
<InlineUIContainer BaselineAlignment="Baseline">
<Image
Width="32"
Height="32"
VerticalAlignment="Top"
Source="/Assets/avalonia-logo.ico" />
</InlineUIContainer>
5.2.7 Добавьте в TextBlock кнопку при помощи InlineUIContainer
5.3 Применение TextBox
5.3.1 Расположить на странице 2 TextBox для логина и пароля.
5.3.2 Указать для них Watermark для отображения подписи для поля ввода
5.3.3 Для поля ввода пароля указать PasswordChar
5.3.4 Добавить еще несколько TextBox для ввода Email и числового кода,
указать для них различные значения TextInputOptions.ContentType
5.4 Применение CheckBox
5.4.1 Расположить на странице CheckBox. Протестировать его работу.
5.5 Применение RadioButton
5.5.1 Расположить на странице 4 RadioButton. Для каждой пары
RadioButton указать различное значение свойства GroupName.
5.5.2 Протестировать работу RadioButton.
5.6 Применение CalendarDatePicker
5.6.1 Расположить на странице CalendarDatePicker для выбора даты
рождения.
5.6.2 Добавить на страницу метку, выводящую значение возраста
человека на основе выбранной даты.
5.7 Применение ComboBox
5.7.1 Расположить на странице ComboBox и TextBlock
5.7.2 Создать в ControlsViewModel свойство Languages, содержащее
список языков программирования, и поле selectedLanguage, помеченное
атрибутом ObservableProperty.
5.7.3 Осуществить привязку свойств к ComboBox для выбора языка, и
TextBlock для отображения выбранного. Протестировать их работу
5.8 Применение Slider
5.8.1 Расположить на странице Slider и Rectange, залитый цветом
5.8.2 В зависимости от значения слайдера необходимо изменять
прозрачность Rectange.
5.9 Применение ToggleSwitch
5.9.1 Расположить на странице ToggleSwitch, установить для него
значение OnContent и OffContent, для отображения текста
Включено/Выключено
5.10 Валидация свойств
5.10.1 Создайте новую страницу Avalonia (UserControl) – RegistrationView.
На странице расположите следующие элементы:
Поле ввода логина
Поле ввода пароля
Поле ввода подтверждения пароля
Поле ввода email
Поле ввода номера телефона
5.10.2 Создайте класс UserCreditionals, унаследованный от
ObservableValidator
5.10.3 Определите в классе поля для всех необходимых свойств привязки:
[ObservableProperty]
[NotifyDataErrorInfo]
private string name;
NotifyDataErrorInfo используется для оповещения о изменении ошибок
валидации при изменении значения свойства.
5.10.4 Создайте новый ViewModel – RegistrationViewModel. Определите в
ней свойство для привязки типа UserCreditionals.
5.10.5 Используя атрибуты валидации, установите в UserCreditionals
следующие ограничения:
Логин может содержать только латинские буквы, цифры и нижнее
подчеркивание, длина логина – не менее 3 символов и не более 20
Пароль должен быть длиной не менее 8 символов, содержать латинские
буквы верхнего и нижнего регистра, спецсимволы
Email должен содержать корректный email, а номер телефона -
корректный номер.
Все поля должны быть заполнены.
5.10.6 Проверить работу валидаторов полей ввода.


control view

using CommunityToolkit.Mvvm.ComponentModel;
using System.Collections.Generic;
using System;

namespace YourNamespace.ViewModels;

public partial class ControlsViewModel : ObservableObject
{
    [ObservableProperty]
    private string? _selectedLanguage;
    
    public List<string> Languages { get; } = new()
    {
        "C#",
        "JavaScript",
        "Python",
        "Java",
        "C++",
        "TypeScript"
    };
    
    [ObservableProperty]
    private double _opacityValue = 1.0;
    
    [ObservableProperty]
    private DateTimeOffset? _birthDate;
    
    public int Age => BirthDate.HasValue ? 
        DateTime.Now.Year - BirthDate.Value.Year : 0;
}

control view Adams

<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:vm="using:YourNamespace.ViewModels"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             x:Class="YourNamespace.Views.ControlsView">
    
    <Design.DataContext>
        <vm:ControlsViewModel/>
    </Design.DataContext>
    
    <ScrollViewer>
        <StackPanel Spacing="10" Margin="20">
            <!-- 5.2 TextBlock -->
            <Border BorderBrush="Gray" BorderThickness="1" Padding="10">
                <StackPanel>
                    <TextBlock TextWrapping="Wrap">
                        <!-- 5.2.4 Span with first two Runs -->
                        <Span FontSize="18" Background="LightGray">
                            <Run Foreground="Red" Text="This is first run"/>
                            <Run Foreground="Blue" Text="This is second run"/>
                        </Span>
                        
                        <!-- 5.2.3 LineBreak -->
                        <LineBreak/>
                        
                        <!-- 5.2.5 Formatted text -->
                        <Bold><Run Text="Bold text"/></Bold>
                        <Italic><Run Text="Italic text"/></Italic>
                        <Underline><Run Text="Underlined text"/></Underline>
                        
                        <!-- 5.2.6 Image -->
                        <InlineUIContainer BaselineAlignment="Baseline">
                            <Image Width="32" Height="32" VerticalAlignment="Top"
                                   Source="/Assets/avalonia-logo.ico"/>
                        </InlineUIContainer>
                        
                        <!-- 5.2.7 Button -->
                        <InlineUIContainer BaselineAlignment="Baseline">
                            <Button Content="Inline Button" Margin="5,0"/>
                        </InlineUIContainer>
                    </TextBlock>
                </StackPanel>
            </Border>
            
            <!-- 5.3 TextBox -->
            <Border BorderBrush="Gray" BorderThickness="1" Padding="10">
                <StackPanel Spacing="10">
                    <TextBox Watermark="Login"/>
                    <TextBox Watermark="Password" PasswordChar="*"/>
                    <TextBox Watermark="Email" 
                             TextInputOptions.ContentType="Email"/>
                    <TextBox Watermark="Code" 
                             TextInputOptions.ContentType="Digits"/>
                </StackPanel>
            </Border>
            
            <!-- 5.4 CheckBox -->
            <Border BorderBrush="Gray" BorderThickness="1" Padding="10">
                <CheckBox Content="I agree with terms and conditions"/>
            </Border>
            
            <!-- 5.5 RadioButton -->
            <Border BorderBrush="Gray" BorderThickness="1" Padding="10">
                <StackPanel>
                    <RadioButton GroupName="Group1" Content="Option 1"/>
                    <RadioButton GroupName="Group1" Content="Option 2"/>
                    <RadioButton GroupName="Group2" Content="Option A"/>
                    <RadioButton GroupName="Group2" Content="Option B"/>
                </StackPanel>
            </Border>
            
            <!-- 5.6 CalendarDatePicker -->
            <Border BorderBrush="Gray" BorderThickness="1" Padding="10">
                <StackPanel>
                    <CalendarDatePicker SelectedDate="{Binding BirthDate}"
                                       Watermark="Select birth date"/>
                    <TextBlock Text="{Binding Age, StringFormat='Age: {0}'}"/>
                </StackPanel>
            </Border>
            
            <!-- 5.7 ComboBox -->
            <Border BorderBrush="Gray" BorderThickness="1" Padding="10">
                <StackPanel>
                    <ComboBox ItemsSource="{Binding Languages}"
                              SelectedItem="{Binding SelectedLanguage}"
                              Width="200"/>
                    <TextBlock Text="{Binding SelectedLanguage, 
                                     StringFormat='Selected: {0}'}"/>
                </StackPanel>
            </Border>
            
            <!-- 5.8 Slider -->
            <Border BorderBrush="Gray" BorderThickness="1" Padding="10">
                <StackPanel>
                    <Slider Minimum="0" Maximum="1" Value="{Binding OpacityValue}"
                            Width="200"/>
                    <Rectangle Fill="Blue" Height="50" Width="200"
                               Opacity="{Binding OpacityValue}"/>
                </StackPanel>
            </Border>
            
            <!-- 5.9 ToggleSwitch -->
            <Border BorderBrush="Gray" BorderThickness="1" Padding="10">
                <ToggleSwitch OnContent="Включено" OffContent="Выключено"/>
            </Border>
        </StackPanel>
    </ScrollViewer>
</UserControl>

5.10

using CommunityToolkit.Mvvm.ComponentModel;
using System.ComponentModel.DataAnnotations;

namespace YourNamespace.Models;

public partial class UserCreditionals : ObservableValidator
{
    [ObservableProperty]
    [NotifyDataErrorInfo]
    [Required(ErrorMessage = "Login is required")]
    [RegularExpression(@"^[a-zA-Z0-9_]{3,20}$", 
        ErrorMessage = "Login must be 3-20 chars (letters, digits, _)")]
    private string _name = string.Empty;
    
    [ObservableProperty]
    [NotifyDataErrorInfo]
    [Required(ErrorMessage = "Password is required")]
    [MinLength(8, ErrorMessage = "Password must be at least 8 chars")]
    [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$",
        ErrorMessage = "Password must contain upper/lower case, digit and special char")]
    private string _password = string.Empty;
    
    [ObservableProperty]
    [NotifyDataErrorInfo]
    [Required(ErrorMessage = "Password confirmation is required")]
    [CustomValidation(typeof(UserCreditionals), nameof(ValidatePasswordConfirm))]
    private string _passwordConfirm = string.Empty;
    
    [ObservableProperty]
    [NotifyDataErrorInfo]
    [Required(ErrorMessage = "Email is required")]
    [EmailAddress(ErrorMessage = "Invalid email format")]
    private string _email = string.Empty;
    
    [ObservableProperty]
    [NotifyDataErrorInfo]
    [Required(ErrorMessage = "Phone is required")]
    [Phone(ErrorMessage = "Invalid phone number")]
    private string _phone = string.Empty;
    
    public static ValidationResult ValidatePasswordConfirm(string confirm, ValidationContext context)
    {
        var instance = (UserCreditionals)context.ObjectInstance;
        return instance.Password == confirm ? 
            ValidationResult.Success : 
            new ValidationResult("Passwords don't match");
    }
}

registration cs

using CommunityToolkit.Mvvm.ComponentModel;

namespace YourNamespace.ViewModels;

public partial class RegistrationViewModel : ObservableObject
{
    [ObservableProperty]
    private UserCreditionals _userCreditionals = new();
}

<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:vm="using:YourNamespace.ViewModels"
             mc:Ignorable="d" d:DesignWidth="400" d:DesignHeight="500"
             x:Class="YourNamespace.Views.RegistrationView">
    
    <Design.DataContext>
        <vm:RegistrationViewModel/>
    </Design.DataContext>
    
    <ScrollViewer>
        <StackPanel Spacing="10" Margin="20" Width="300">
            <TextBox Watermark="Login" 
                     Text="{Binding UserCreditionals.Name, Mode=TwoWay}"
                     DataValidationErrors.Errors="{Binding UserCreditionals.Errors[Name]}"/>
            
            <TextBox Watermark="Password" PasswordChar="*"
                     Text="{Binding UserCreditionals.Password, Mode=TwoWay}"
                     DataValidationErrors.Errors="{Binding UserCreditionals.Errors[Password]}"/>
            
            <TextBox Watermark="Confirm Password" PasswordChar="*"
                     Text="{Binding UserCreditionals.PasswordConfirm, Mode=TwoWay}"
                     DataValidationErrors.Errors="{Binding UserCreditionals.Errors[PasswordConfirm]}"/>
            
            <TextBox Watermark="Email"
                     Text="{Binding UserCreditionals.Email, Mode=TwoWay}"
                     DataValidationErrors.Errors="{Binding UserCreditionals.Errors[Email]}"/>
            
            <TextBox Watermark="Phone"
                     Text="{Binding UserCreditionals.Phone, Mode=TwoWay}"
                     DataValidationErrors.Errors="{Binding UserCreditionals.Errors[Phone]}"/>
            
            <Button Content="Register" Margin="0,20"/>
        </StackPanel>
    </ScrollViewer>
</UserControl>

Adams cs

using Avalonia.Controls;
using Avalonia.Markup.Xaml;

namespace YourNamespace.Views;

public partial class RegistrationView : UserControl
{
    public RegistrationView()
    {
        InitializeComponent();
    }
    
    private void InitializeComponent()
    {
        AvaloniaXamlLoader.Load(this);
    }
}